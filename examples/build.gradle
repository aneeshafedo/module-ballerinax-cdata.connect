/*
 * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: 'java'

description = 'Ballerina - Cdata-connect Examples'

def filePath = project.fileTree("${project.projectDir}")
def examples = filePath.matching {
    include("**/*.bal")
    exclude("**/deprecated/**/*.bal")
}

task testExamples {
    dependsOn ":${project.packageName}-ballerina:build"
    pullBalDependency("ballerinax", "cdata.connect.driver")

    doLast {
        examples.each { example ->  executeBalCommand ("run ${example}", "${project.rootDir}") }
    }
}

// TODO: Remove the tasks once the issue of pulling incorrect versions of the Ballerina modules is fixed.
def pullBalDependency(String org, String name) {
    def dependencyPath = "${System.getProperty('user.home')}/.ballerina/repositories/central.ballerina.io/bala/${org}/${name}"
    if (!file(dependencyPath).exists()) {
        executeBalCommand ("pull ${org}/${name}", "${project.rootDir}")
    }
}

task buildExamples {
    dependsOn ":${project.packageName}-ballerina:build"    
    pullBalDependency("ballerinax", "cdata.connect.driver")

    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(":${project.packageName}-examples:test")) {
            buildExamples.enabled = false
        } else {
            testExamples.enabled = false
        }
    }
    doLast {
        // TODO: Enabled --offline due to a bug in pulling incorrect versions from the central repository.
        examples.each { example ->  executeBalCommand ("build --offline ${example}", "${project.rootDir}") }
    }
}

test.dependsOn testExamples
build.dependsOn buildExamples
